// Imports
import java.time.*
import java.time.format.DateTimeFormatter

// Pipeline variable: Variable store of user selection of confirmation of Dev/Test Deployment
def IS_DEV_APPROVED = 'no'
// Variable Branch
def BRANCH_ACTION = 'no'
// CurrentTime
def NOW = LocalDateTime.now()

// Def BUILD ID
def BUILD_NUMBER = BUILD_ID
// InvasivesBC Pipeline
pipeline {
    agent none
    options {
        disableResume()
    }
    stages {
        // CI: Checking branch specific action or not
        stage('Check Branch Action') {
            agent { label 'deploy' }
            when {
                branch 'dev'
            }
            steps {
                echo "Dev"
                sh 'printenv'
                echo "Dev Branch trigger ${NOW}"
                script {
                    BRANCH_ACTION = 'yes'
                    IS_DEV_APPROVED = 'yes'
                    def TIME_TAG = NOW.format(DateTimeFormatter.ofPattern("yyyyMMddHHmm")) 
                    BUILD_NUMBER = "${TIME_TAG}${BUILD_ID}"
                    
                }
                echo "BUILD NUMBER ${BUILD_NUMBER}"
            }

        }
        // CI: Build Pull Request Head 
        stage('Build [CI]') {
            when {
                expression { return BRANCH_ACTION == 'no'}
            }
            parallel {
                stage('Build API [CI]') {
                    agent { label 'build' }
                    steps {
                        sh 'printenv'
                        script {
                            echo "API Build Pipeline"
                            def filesInThisCommitAsString = sh(script:"git diff --name-only HEAD~1..HEAD | grep -E '^api/|^/api/|^app/|^/app/' || echo -n ''", returnStatus: false, returnStdout: true).trim()
                            def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                            echo "${filesInThisCommitAsString}"
                            if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                                currentBuild.rawBuild.delete()
                                error("No changes detected in the path ('^api/')")
                            }
                        }
                        echo "Aborting all running jobs ..."
                        script {
                            abortAllPreviousBuildInProgress(currentBuild)
                        }
                        echo "Building ..."
                       // sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${CHANGE_ID}"
                    }

                }
                stage('Build APP [CI]') {
                    agent { label 'build' }
                    steps {
                        script {
                            echo "App Build Pipeline"
                            def filesInThisCommitAsString = sh(script:"git diff --name-only HEAD~1..HEAD | grep -E '^/app/|^app/|^api/|^/api/' || echo -n ''", returnStatus: false, returnStdout: true).trim()
                            def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                            if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                                currentBuild.rawBuild.delete()
                                error("No changes detected in the path ('^app/')")
                            }
                        }
                        echo "Aborting all running jobs ..."
                        script {
                            abortAllPreviousBuildInProgress(currentBuild)
                        }
                        echo "Building ..."
                        //sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${CHANGE_ID}"
                    }
                }
            }
        }
        // CI: Deploy and setup database for testing
        stage('Pre Deploy (Dev) [CI]') {
            when {
                expression { return BRANCH_ACTION == 'no'}
            }
            agent { label 'deploy' }
            steps {
                echo "Deploying Postgress DB [PR]"
                /*sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${CHANGE_ID} --env=dev"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${CHANGE_ID} --env=dev"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run seed -- --pr=${CHANGE_ID} --env=dev"*/
            }
        }
        // CI: Pull Request test stage
        stage('Test API (Dev) [CI]') {
            when {
                expression { return BRANCH_ACTION == 'no'}
            }
            agent { label 'deploy' }
            steps {
                echo "Testing app [PR]"
                //sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run test -- --pr=${CHANGE_ID} --env=dev"
            }
        }
        // CI: Deployment of PR image to dev env
        stage('Deploy (DEV/PR ENV) API and App [CI]') {
            when {
                expression { return BRANCH_ACTION == 'no'}
            }
            agent { label 'deploy' }
            steps {
                /*echo "Deploying API for  [PR] ${CHANGE_ID}..."
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --pr=${CHANGE_ID} --env=dev"
                echo "Deploying APP for [PR] ${CHANGE_ID}..."
                sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev"*/
            }
        }
        // CD: Build image from dev branch
        stage('Buid For Dev/Test [CD]') {
            when {
                expression { return IS_DEV_APPROVED == 'yes'}
            }
            parallel {
                stage('Build Dev/Test API') {
                    agent { label 'build' }
                    steps {
                        echo "Build API image from [dev] branch"
                        // sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${BUILD_NUMBER} --branch=dev --type=static"
                    }

                }
                stage('Build Dev/Test APP') {
                    agent { label 'build' }
                    steps {
                        echo "Build APP image from [dev] branch"
                        // sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${BUILD_NUMBER} --branch=dev --type=static"
                    }
                }
            }
        }
        // CD: Deploying dev image to Dev and Test Env
        stage('Deploy to Dev/Test Env [CD]') {
            when {
                expression { return IS_DEV_APPROVED == 'yes'}
            }
            parallel {
                 stage('Deploy Dev [CD]') {
                    agent {
                        label 'deploy'
                    }
                    steps {
                        // Postgress 
                        /*echo "Deploying Postgress [DEV]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${BUILD_NUMBER} --env=dev --type=static --branch=dev"
                        // Backup
                        echo "Deploying backup app [DEV]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-db-backup -- --pr=${BUILD_NUMBER} --env=dev --type=static"
                        echo "Running DB Backup Job [DEV]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run backup -- --env=dev --backup=true"
                        // Migration
                        echo "Running DB Migration [DEV]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${BUILD_NUMBER} --env=dev --type=static --branch=dev"
                        // Seed
                        echo "Running DB Seed Job [DEV]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run seed -- --pr=${BUILD_NUMBER} --env=dev --type=static --branch=dev"
                        // API
                        echo "Deploying API [DEV] ..."
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${BUILD_NUMBER} --env=dev --type=static --branch=dev"
                        // Tools
                        echo "Deploying dev tools [DEV] ..."
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --env=dev --type=static --pr=${BUILD_NUMBER}"
                        // App
                        echo "Deploying APP [DEV] ..."
                        sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${BUILD_NUMBER} --env=dev --type=static --branch=dev"*/
                    }
                }
                stage('Deploy Test [CD]') {
                    agent {
                        label 'deploy'
                    }
                    steps {
                        // Postgress 
                        /*echo "Deploying Postgress [STATIC/TEST]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${BUILD_NUMBER} --env=test --type=static --branch=dev"
                        // Backup
                        echo "Deploying backup app [STATIC | TEST]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-db-backup -- --pr=${BUILD_NUMBER} --env=test --type=static"
                        echo "Running DB Backup Job [STATIC | TEST]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run backup -- --env=test --backup=true"
                        // Migration
                        echo "Running DB Migration [TEST]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${BUILD_NUMBER} --env=test --type=static --branch=dev"
                        echo "Running DB Seed Job [TEST]"
                        // Seed
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run seed -- --pr=${BUILD_NUMBER} --env=test --type=static --branch=dev"
                        // API
                        echo "Deploying API [TEST] ..."
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${BUILD_NUMBER} --env=test --type=static --branch=dev"
                        // Tools
                        echo "Deploying dev tools [TEST] ..."
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --env=test --type=static --pr=${BUILD_NUMBER}"
                        // App
                        echo "Deploying APP [TEST] ..."
                        sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${BUILD_NUMBER} --env=test --type=static --branch=dev"*/
                    }
                }
            }
        }
        // CD: Get confirmation and deployment of prod env
        stage('Deploy (PROD) API/APP [CD]') {
            agent { label 'deploy' }
            when {
                environment name : 'CHANGE_TARGET', value: 'prod'
            }
            steps {
                script {
                    def IS_APPROVED = input(message: "Deploy to PROD?", ok: "yes", parameters: [string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to PROD?')])
                    if (IS_APPROVED != 'yes') {
                        currentBuild.result = "ABORTED"
                        error "User cancelled"
                    }
                    // Deploy Postgress
                    /*echo "Deploying Postgress [PROD] ..."
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${CHANGE_ID} --env=prod --type=static"
                    // Database backup
                    echo "Deploying backup of app [PROD]"
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-db-backup -- --pr=${CHANGE_ID} --env=prod --type=static"
                    echo "Running DB Backup Job [PROD]"
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run backup -- --env=prod --backup=true"
                    // Database Migration/Setup
                    echo "Running DB Migration [PROD]"
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${CHANGE_ID} --env=prod --type=static"
                    // Deploy API
                    echo "Deploying in [PROD] [API]..."
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod --type=static"
                    // Deploy App
                    echo "Deploying in [PROD] [APP]..."
                    sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod --type=static"
                    // Deploy tools (schemaSpy)
                    echo "Deploying dev tools [PROD] ..."
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --env=prod --type=static --pr=${CHANGE_ID}"*/
                } 
            }
        }
        // Pipeline: Clean stage For Branch
        stage ("Acceptance Branch") {
            agent { label 'deploy' }
            when {
                expression { return BUILD_NUMBER != BUILD_ID}
            }
            steps {
                // Clean API Build for Build
                /*sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run clean -- --pr=${BUILD_NUMBER} --env=build"
                // Clean App Build
                sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run clean -- --pr=${BUILD_NUMBER} --env=build"*/
            }
        }
        // Pipeline: Clean stage for PR
        stage('Acceptance Pull Request') {
            agent { label 'deploy' }
            when {
                expression { return BUILD_NUMBER == BUILD_ID}
            }
            steps {
                script {
                    /*def DO_CLEAN = input(message: "Should we continue with Pull Request assest?", ok: "yes", parameters: [string(name: 'DO_CLEAN', defaultValue: 'yes', description: 'Clean Pull Request assest?')])
                    if (DO_CLEAN != 'yes') {
                        currentBuild.result = "ABORTED"
                        error "User cancelled cleanup"
                    }

                    echo "Acceptance of PR ${CHANGE_ID}. Cleaning..."
                    // Clean API Build 
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run clean -- --pr=${CHANGE_ID} --env=build"
                    // Clean API deployment Dev
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run clean -- --pr=${CHANGE_ID} --env=dev"
                    // Clean App Build
                    sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run clean -- --pr=${CHANGE_ID} --env=build"
                    // Clean App deployment Dev
                    sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run clean -- --pr=${CHANGE_ID} --env=dev"*/
                }
            }
        }
    }
}